// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Blog Service API defines an HTTP(S) interface.",
    "title": "Blog Service API",
    "contact": {
      "name": "Blog Service API",
      "url": "https://www.melektekno.com/",
      "email": "hendros@gmail.com"
    },
    "version": "master"
  },
  "host": "localhost:8080",
  "paths": {
    "/api/v1/blog/create": {
      "post": {
        "tags": [
          "Blog"
        ],
        "summary": "create a new blog",
        "operationId": "blog.create",
        "responses": {
          "201": {
            "description": "Blog Created",
            "schema": {
              "$ref": "#/definitions/CreateBlogResponse"
            }
          },
          "400": {
            "$ref": "#/responses/ErrorBadRequest"
          },
          "401": {
            "$ref": "#/responses/ErrorUnauthorized"
          },
          "412": {
            "$ref": "#/responses/ErrorPreconditionFailed"
          },
          "default": {
            "$ref": "#/responses/ErrorUnexpected"
          }
        }
      },
      "parameters": [
        {
          "description": "create blog payload",
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/CreateBlogRequest"
          }
        }
      ]
    },
    "/api/v1/blog/{blog_id}": {
      "get": {
        "tags": [
          "Blog"
        ],
        "summary": "get the blog of service",
        "operationId": "blog.get",
        "responses": {
          "200": {
            "description": "blog response",
            "schema": {
              "$ref": "#/definitions/Blogs"
            }
          },
          "401": {
            "$ref": "#/responses/ErrorUnauthorized"
          },
          "412": {
            "$ref": "#/responses/ErrorPreconditionFailed"
          },
          "default": {
            "$ref": "#/responses/ErrorUnexpected"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/BlogID"
        }
      ]
    }
  },
  "definitions": {
    "Blogs": {
      "type": "object",
      "required": [
        "title",
        "body"
      ],
      "properties": {
        "body": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateBlogRequest": {
      "type": "object",
      "required": [
        "blog"
      ],
      "properties": {
        "blog": {
          "$ref": "#/definitions/Blogs"
        }
      }
    },
    "CreateBlogResponse": {
      "type": "object",
      "required": [
        "id",
        "blog"
      ],
      "properties": {
        "blog": {
          "$ref": "#/definitions/Blogs"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "Tag": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "APIVersion": {
      "type": "string",
      "description": "version number of the Service Broker API that the Platform will use",
      "name": "X-Broker-API-Version",
      "in": "header",
      "required": true
    },
    "BlogID": {
      "type": "string",
      "description": "blog identifier",
      "name": "blog_id",
      "in": "path",
      "required": true
    },
    "OriginatingIdentity": {
      "type": "string",
      "description": "identity of the user that initiated the request from the Platform",
      "name": "X-Broker-API-Originating-Identity",
      "in": "header"
    },
    "RequestIdentity": {
      "type": "string",
      "description": "idenity of the request from the Platform",
      "name": "X-Broker-API-Request-Identity",
      "in": "header"
    },
    "accepts_incomplete": {
      "type": "boolean",
      "description": "asynchronous operations supported",
      "name": "accepts_incomplete",
      "in": "query"
    },
    "plan_id": {
      "type": "string",
      "description": "id of the plan associated with the instance being deleted",
      "name": "plan_id",
      "in": "query",
      "required": true
    },
    "service_id": {
      "type": "string",
      "description": "id of the service associated with the instance being deleted",
      "name": "service_id",
      "in": "query",
      "required": true
    }
  },
  "responses": {
    "ErrorBadRequest": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorConflict": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorGone": {
      "description": "Gone",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorNotFound": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorPreconditionFailed": {
      "description": "Precondition Failed",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorUnauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorUnexpected": {
      "description": "Unexpected",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorUnprocessableEntity": {
      "description": "Unprocessable Entity",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Blog Service API defines an HTTP(S) interface.",
    "title": "Blog Service API",
    "contact": {
      "name": "Blog Service API",
      "url": "https://www.melektekno.com/",
      "email": "hendros@gmail.com"
    },
    "version": "master"
  },
  "host": "localhost:8080",
  "paths": {
    "/api/v1/blog/create": {
      "post": {
        "tags": [
          "Blog"
        ],
        "summary": "create a new blog",
        "operationId": "blog.create",
        "responses": {
          "201": {
            "description": "Blog Created",
            "schema": {
              "$ref": "#/definitions/CreateBlogResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "description": "create blog payload",
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/CreateBlogRequest"
          }
        }
      ]
    },
    "/api/v1/blog/{blog_id}": {
      "get": {
        "tags": [
          "Blog"
        ],
        "summary": "get the blog of service",
        "operationId": "blog.get",
        "responses": {
          "200": {
            "description": "blog response",
            "schema": {
              "$ref": "#/definitions/Blogs"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "blog identifier",
          "name": "blog_id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Blogs": {
      "type": "object",
      "required": [
        "title",
        "body"
      ],
      "properties": {
        "body": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "title": {
          "type": "string"
        }
      }
    },
    "CreateBlogRequest": {
      "type": "object",
      "required": [
        "blog"
      ],
      "properties": {
        "blog": {
          "$ref": "#/definitions/Blogs"
        }
      }
    },
    "CreateBlogResponse": {
      "type": "object",
      "required": [
        "id",
        "blog"
      ],
      "properties": {
        "blog": {
          "$ref": "#/definitions/Blogs"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "Tag": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "APIVersion": {
      "type": "string",
      "description": "version number of the Service Broker API that the Platform will use",
      "name": "X-Broker-API-Version",
      "in": "header",
      "required": true
    },
    "BlogID": {
      "type": "string",
      "description": "blog identifier",
      "name": "blog_id",
      "in": "path",
      "required": true
    },
    "OriginatingIdentity": {
      "type": "string",
      "description": "identity of the user that initiated the request from the Platform",
      "name": "X-Broker-API-Originating-Identity",
      "in": "header"
    },
    "RequestIdentity": {
      "type": "string",
      "description": "idenity of the request from the Platform",
      "name": "X-Broker-API-Request-Identity",
      "in": "header"
    },
    "accepts_incomplete": {
      "type": "boolean",
      "description": "asynchronous operations supported",
      "name": "accepts_incomplete",
      "in": "query"
    },
    "plan_id": {
      "type": "string",
      "description": "id of the plan associated with the instance being deleted",
      "name": "plan_id",
      "in": "query",
      "required": true
    },
    "service_id": {
      "type": "string",
      "description": "id of the service associated with the instance being deleted",
      "name": "service_id",
      "in": "query",
      "required": true
    }
  },
  "responses": {
    "ErrorBadRequest": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorConflict": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorGone": {
      "description": "Gone",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorNotFound": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorPreconditionFailed": {
      "description": "Precondition Failed",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorUnauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorUnexpected": {
      "description": "Unexpected",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ErrorUnprocessableEntity": {
      "description": "Unprocessable Entity",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  }
}`))
}
